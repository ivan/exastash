-- Owners of gdrive files

CREATE TABLE gdrive_owners (
    id     int   GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY CHECK (id >= 1),
    -- email or other identifying string
    owner  text  CHECK (owner ~ '\A.{1,255}\Z')
);

CREATE UNIQUE INDEX gdrive_owners_owner_index ON gdrive_owners (owner);

CREATE TRIGGER gdrive_owners_check_update
    BEFORE UPDATE ON gdrive_owners
    FOR EACH ROW
    WHEN (OLD.id != NEW.id)
    EXECUTE FUNCTION raise_exception('cannot change id');

CREATE TRIGGER gdrive_owners_forbid_truncate
    BEFORE TRUNCATE ON gdrive_owners
    EXECUTE FUNCTION raise_exception('truncate is forbidden');



-- Files in gdrive

-- The shortest gdrive_id we have is 28
-- The longest gdrive_id we have is 33, but allow up to 160 in case Google changes format
CREATE DOMAIN gdrive_id AS text  CHECK (VALUE ~ '\A[-_0-9A-Za-z]{28,160}\Z');

-- Columns are ordered for optimal packing, be careful
CREATE TABLE gdrive_files (
    -- Not a UUID, just using uuid as a 128-bit field instead of bytea to save one byte
    md5          uuid         NOT NULL,
    size         bigint       NOT NULL CHECK (size >= 1),
    last_probed  timestamptz,
    -- crc32c is actually unsigned, but use an int instead of bytea to save one byte
    crc32c       int          NOT NULL,
    -- Can be NULL because some of our old chunks have no recorded owner
    owner        int          REFERENCES gdrive_owners,
    id           gdrive_id    PRIMARY KEY
);

CREATE TRIGGER gdrive_files_check_update
    BEFORE UPDATE ON gdrive_files
    FOR EACH ROW
    WHEN (
        OLD.id     != NEW.id     OR
        OLD.md5    != NEW.md5    OR
        OLD.crc32c != NEW.crc32c OR
        OLD.size   != NEW.size
    )
    EXECUTE FUNCTION raise_exception('cannot change id, md5, crc32c, or size');

CREATE OR REPLACE FUNCTION gdrive_files_not_referenced() RETURNS trigger AS $$
DECLARE
    sequence bigint;
BEGIN
    -- TODO: make sure index is actually being used for this
    sequence := (SELECT chunk_sequence FROM gdrive_chunk_sequences WHERE files @> ARRAY[OLD.file_id] LIMIT 1);
    IF FOUND THEN
        RAISE EXCEPTION 'file_id still referenced by chunk_sequence=%', sequence;
    END IF;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER gdrive_files_check_delete
    BEFORE DELETE ON gdrive_files
    FOR EACH ROW
    EXECUTE FUNCTION gdrive_files_not_referenced();

CREATE TRIGGER gdrive_files_forbid_truncate
    BEFORE TRUNCATE ON gdrive_files
    EXECUTE FUNCTION raise_exception('truncate is forbidden');



-- Sequences of gdrive files

CREATE TYPE cipher AS ENUM ('AES_128_CTR', 'AES_128_GCM');

-- Columns are ordered for optimal packing, be careful
CREATE TABLE gdrive_chunk_sequences (
    -- Not a UUID, just using uuid as a 128-bit field instead of bytea to save one byte
    cipher_key      uuid         NOT NULL,
    chunk_sequence  bigint       GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY CHECK (chunk_sequence >= 1),
    cipher          cipher       NOT NULL,
    -- An ordered list of files.
    --
    -- Imagine a REFERENCES on on gdrive_files (file_id) here; PostgreSQL 12 doesn't
    -- support it for array elements, thus we have two triggers to emulate it.
    files           gdrive_id[]  NOT NULL CHECK (cardinality(files) >= 1)
);

CREATE INDEX gdrive_file_id_index ON gdrive_chunk_sequences USING GIN (files);

CREATE OR REPLACE FUNCTION assert_files_exist_in_gdrive_files() RETURNS trigger AS $$
DECLARE
    file_count integer;
BEGIN
    -- This catches not only missing files but also duplicate entries in NEW.files
    file_count := (SELECT COUNT(id) FROM gdrive_files WHERE id IN (SELECT unnest(NEW.files)));
    IF file_count != cardinality(NEW.files) THEN
        RAISE EXCEPTION 'chunk sequence had % files: % but only % of these are in gdrive_files',
            cardinality(NEW.files), NEW.files, file_count;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER gdrive_chunk_sequences_check_files
    BEFORE INSERT ON gdrive_chunk_sequences
    FOR EACH ROW
    EXECUTE FUNCTION assert_files_exist_in_gdrive_files();

CREATE TRIGGER gdrive_chunk_sequences_check_update
    BEFORE UPDATE ON gdrive_chunk_sequences
    FOR EACH ROW
    EXECUTE FUNCTION raise_exception('cannot change chunk_sequence, cipher, cipher_key, or files');

CREATE TRIGGER gdrive_chunk_sequences_forbid_truncate
    BEFORE TRUNCATE ON gdrive_chunk_sequences
    EXECUTE FUNCTION raise_exception('truncate is forbidden');



-- G Suite domains

CREATE TABLE gsuite_domains (
    id      smallint  GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY CHECK (id >= 1),
    domain  text      CHECK (domain ~ '\A.{1,255}\Z')
    -- TODO: access keys
);

CREATE UNIQUE INDEX gsuite_domains_domain_index ON gsuite_domains (domain);

CREATE TRIGGER gsuite_domains_check_update
    BEFORE UPDATE ON gsuite_domains
    FOR EACH ROW
    WHEN (OLD.id != NEW.id)
    EXECUTE FUNCTION raise_exception('cannot change id');

CREATE TRIGGER gsuite_domains_forbid_truncate
    BEFORE TRUNCATE ON gsuite_domains
    EXECUTE FUNCTION raise_exception('truncate is forbidden');



-- Storage

CREATE TABLE storage_gdrive (
    file_id         bigint    NOT NULL REFERENCES files (id),
    chunk_sequence  bigint    NOT NULL REFERENCES gdrive_chunk_sequences,
    gsuite_domain   smallint  NOT NULL REFERENCES gsuite_domains (id),

    -- Include chunk_sequence in the key because we might want to reupload
    -- some chunk sequences in a new format.
    PRIMARY KEY (file_id, gsuite_domain, chunk_sequence)
);

CREATE TRIGGER storage_gdrive_check_update
    BEFORE UPDATE ON storage_gdrive
    FOR EACH ROW
    EXECUTE FUNCTION raise_exception('cannot change file_id, gsuite_domain, or chunk_sequence');

CREATE TRIGGER storage_gdrive_forbid_truncate
    BEFORE TRUNCATE ON storage_gdrive
    EXECUTE FUNCTION raise_exception('truncate is forbidden');
