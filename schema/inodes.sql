-- text instead of bytea, see the UTF-8 rationale on linux_basename
CREATE DOMAIN symlink_pathname AS text
    -- ext4 and btrfs limit the symlink target to ~4096 bytes.
    -- xfs limits the symlink target to 1024 bytes.
    -- We follow the lower limit in case symlinks need to be copied to XFS.
    --
    -- Linux does not allow empty pathnames: https://lwn.net/Articles/551224/
    CHECK (octet_length(VALUE) >= 1 AND octet_length(VALUE) <= 1024);

CREATE DOMAIN hostname AS text CHECK (octet_length(VALUE) >= 1 AND octet_length(VALUE) <= 253);

-- Instead of occupying an entire 64-bit inode space in these tables, we store
-- smaller ids that can be mapped into a 64-bit inode range by e.g. a FUSE server
-- serving a filesystem.  This allows such a server to map other id spaces into
-- the inode range if needed.
--
-- We don't store uid, gid, and the exact mode; those can be decided and
-- changed globally by the user.
--
-- timestamptz is microsecond-precise
-- xfs and ext4 on Linux are nanosecond-precise
-- NTFS on Windows is 100ns-precise
--
-- timestamptz won't allow the last 3 digits on nanoseconds to round trip, but it isn't worth
-- storing extra bytes to support this.
CREATE TABLE dirs (
    -- Limit of 2T can be raised if needed
    id              bigint            GENERATED BY DEFAULT AS IDENTITY (START WITH 1) PRIMARY KEY CHECK (id >= 1 AND id < 2000000000000),
    mtime           timestamptz       NOT NULL,

    birth_time      timestamptz       NOT NULL,
    -- When/where/with what exastash version was this inode produced?
    birth_version   smallint          NOT NULL REFERENCES exastash_versions (version_id),
    birth_hostname  hostname          NOT NULL
);
REVOKE TRUNCATE ON dirs FROM current_user;

CREATE TABLE files (
    -- Limit of 2T can be raised if needed
    id              bigint            GENERATED BY DEFAULT AS IDENTITY (START WITH 1) PRIMARY KEY CHECK (id >= 1 AND id < 2000000000000),
    mtime           timestamptz       NOT NULL,
    size            bigint            NOT NULL CHECK (size >= 0),
    executable      boolean           NOT NULL,

    birth_time      timestamptz       NOT NULL,
    birth_version   smallint          NOT NULL REFERENCES exastash_versions (version_id),
    birth_hostname  hostname          NOT NULL
);
REVOKE TRUNCATE ON files FROM current_user;

CREATE TABLE symlinks (
    -- Limit of 2T can be raised if needed
    id              bigint            GENERATED BY DEFAULT AS IDENTITY (START WITH 1) PRIMARY KEY CHECK (id >= 1 AND id < 2000000000000),
    mtime           timestamptz       NOT NULL,
    symlink_target  symlink_pathname  NOT NULL,

    birth_time      timestamptz       NOT NULL,
    birth_version   smallint          NOT NULL REFERENCES exastash_versions (version_id),
    birth_hostname  hostname          NOT NULL
);
REVOKE TRUNCATE ON symlinks FROM current_user;


CREATE TRIGGER dirs_check_update
    BEFORE UPDATE ON dirs
    FOR EACH ROW
    WHEN (
        OLD.id             != NEW.id             OR
        OLD.birth_time     != NEW.birth_time     OR
        OLD.birth_version  != NEW.birth_version  OR
        OLD.birth_hostname != NEW.birth_hostname
    )
    EXECUTE FUNCTION raise_exception('cannot change id or birth_* columns');

CREATE TRIGGER files_check_update
    BEFORE UPDATE ON files
    FOR EACH ROW
    WHEN (
        OLD.id             != NEW.id             OR
        OLD.birth_time     != NEW.birth_time     OR
        OLD.birth_version  != NEW.birth_version  OR
        OLD.birth_hostname != NEW.birth_hostname
    )
    EXECUTE FUNCTION raise_exception('cannot change id or birth_* columns');

CREATE TRIGGER symlinks_check_update
    BEFORE UPDATE ON symlinks
    FOR EACH ROW
    WHEN (
        OLD.id             != NEW.id             OR
        OLD.symlink_target != NEW.symlink_target OR
        OLD.birth_time     != NEW.birth_time     OR
        OLD.birth_version  != NEW.birth_version  OR
        OLD.birth_hostname != NEW.birth_hostname
    )
    EXECUTE FUNCTION raise_exception('cannot change id, symlink_target, or birth_* columns');
